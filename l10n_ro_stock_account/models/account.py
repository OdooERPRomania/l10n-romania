# -*- coding: utf-8 -*-
# Â©  2008-2018 Fekete Mihai <mihai.fekete@forbiom.eu>
#              Dorin Hongu <dhongu(@)gmail(.)com
# See README.rst file on addons root folder for license details

from odoo import api, fields, models, _


class AccountAccount(models.Model):
    _inherit = "account.account"

    @api.constrains('internal_type', 'reconcile')
    def _check_reconcile(self):
        accounts = self.env['account.account']
        for account in self:
            if account != self.company_id.property_stock_picking_payable_account_id and \
                    account != self.company_id.property_stock_picking_receivable_account_id:
                accounts |= account

        super(AccountAccount, accounts)._check_reconcile()


class AccountMoveLine(models.Model):
    _inherit = "account.move.line"

    stock_picking_id = fields.Many2one('stock.picking', string='Stock Picking',
                                       help='This account move line has been generated by this stock picking')
    # campul se gaseste si in account.move
    stock_move_id = fields.Many2one('stock.move', string='Stock Move',
                                    help='This account move line has been generated by this stock move')
    stock_inventory_id = fields.Many2one('stock.inventory', string='Stock Inventory',
                                         help='This account move line has been generated by this inventory')

    # todo: de renuntat la cele doua locatii - ele se pot determina din legatura dintre miscare de stoc si miscarea contabila
    # locatia de stoc aferenta miscarii
    stock_location_id = fields.Many2one('stock.location', string='Location')
    # locatie folosita doar pentru notele contabile aferente transferului de stoc
    stock_location_dest_id = fields.Many2one('stock.location', string='Location')

    # @api.onchange('stock_move_id')
    # def onchange_stock_location_id(self):
    #     for line in self:
    #         if line.stock_move_id:
    #             line.stock_location_id = line.stock_move_id.location_id
    #             line.stock_location_dest_id = line.stock_move_id.location_dest_id
    #             # if line.stock_move_id.location_id.usage == 'internal' and \
    #             #         line.stock_move_id.location_dest_id.usage != 'internal':
    #             #     line.stock_location_id = line.stock_move_id.location_id
    #             # elif line.stock_move_id.location_id.usage != 'internal' and \
    #             #         line.stock_move_id.location_dest_id.usage == 'internal':
    #             #     line.stock_location_id = line.stock_move_id.location_dest_id
    #

    def _get_computed_account(self):
        self.ensure_one()
        if self.product_id.type == 'product' and self.move_id.is_purchase_document():
            fiscal_position = self.move_id.fiscal_position_id
            accounts = self.product_id.product_tmpl_id.get_product_accounts(fiscal_pos=fiscal_position)
            if accounts['stock_input']:
                return accounts['stock_input']
        return super(AccountMoveLine, self)._get_computed_account()
